$date
	Tue Oct 21 19:09:48 2014
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module comp2 $end
$var wire 32 ! a [31:0] $end
$var wire 32 " b [31:0] $end
$var reg 1 # isEq $end
$upscope $end
$scope module dmem $end
$var wire 32 $ a [31:0] $end
$var wire 32 % b [31:0] $end
$var wire 1 & clk $end
$var wire 32 ' r1 [31:0] $end
$var wire 32 ( r2 [31:0] $end
$var wire 32 ) r21 [31:0] $end
$var wire 32 * r22 [31:0] $end
$var wire 32 + r23 [31:0] $end
$var wire 32 , r3 [31:0] $end
$var reg 32 - data1 [31:0] $end
$var reg 32 . data2 [31:0] $end
$var reg 5 / e [4:0] $end
$var reg 5 0 f [4:0] $end
$upscope $end
$scope module muj_obvod $end
$var wire 1 1 a $end
$var wire 1 2 b $end
$var wire 1 3 c $end
$var wire 1 4 d $end
$var wire 1 5 e $end
$upscope $end
$scope module multAx4 $end
$var wire 32 6 a [31:0] $end
$var reg 32 7 e [31:0] $end
$var reg 1 8 isZero $end
$upscope $end
$scope module mux2 $end
$var wire 32 9 a [31:0] $end
$var wire 32 : b [31:0] $end
$var wire 1 ; x $end
$var reg 32 < e [31:0] $end
$upscope $end
$scope module mux3 $end
$var wire 32 = a [31:0] $end
$var wire 32 > b [31:0] $end
$var wire 32 ? c [31:0] $end
$var wire 2 @ x [1:0] $end
$var reg 32 A e [31:0] $end
$upscope $end
$scope module muxCv $end
$var wire 1 B a $end
$var wire 1 C b $end
$var wire 1 D c $end
$var wire 1 E d $end
$var reg 1 F e $end
$upscope $end
$scope module pc $end
$var wire 1 G alu2_en $end
$var wire 1 H clk $end
$var wire 32 I pc [31:0] $end
$var reg 32 J e [31:0] $end
$upscope $end
$scope module register32 $end
$var wire 32 K a [31:0] $end
$var wire 1 L clk $end
$var wire 1 M en $end
$var wire 1 N rs $end
$var reg 32 O e [31:0] $end
$upscope $end
$scope module signExt16t32 $end
$var wire 16 P a [15:0] $end
$var reg 32 Q e [31:0] $end
$upscope $end
$scope module sum32 $end
$var wire 32 R a [31:0] $end
$var wire 32 S b [31:0] $end
$var reg 32 T e [31:0] $end
$var reg 1 U isZero $end
$var reg 1 V overflow $end
$upscope $end
$scope module test $end
$var wire 5 W alu1r [4:0] $end
$var wire 5 X alu2r [4:0] $end
$var wire 32 Y cpyData1 [31:0] $end
$var wire 32 Z cpyData2 [31:0] $end
$var wire 32 [ cpyData3 [31:0] $end
$var wire 32 \ cpyData4 [31:0] $end
$var wire 32 ] data1 [31:0] $end
$var wire 32 ^ data2 [31:0] $end
$var wire 32 _ data5 [31:0] $end
$var wire 32 ` data6 [31:0] $end
$var wire 1 a enalu2 $end
$var wire 1 b enalu2reg $end
$var wire 32 c pc [31:0] $end
$var wire 5 d r1 [4:0] $end
$var wire 5 e r2 [4:0] $end
$var wire 5 f r3 [4:0] $end
$var wire 32 g reg1 [31:0] $end
$var wire 32 h reg2 [31:0] $end
$var wire 32 i reg3 [31:0] $end
$var wire 32 j reg4 [31:0] $end
$var wire 32 k reg5 [31:0] $end
$var wire 32 l reg6 [31:0] $end
$var wire 5 m s1 [4:0] $end
$var wire 5 n s2 [4:0] $end
$var wire 5 o s3 [4:0] $end
$var reg 1 p clk $end
$var reg 32 q d [31:0] $end
$var reg 1 r en $end
$var reg 5 s i1 [4:0] $end
$var reg 5 t i2 [4:0] $end
$var reg 5 u i3 [4:0] $end
$var reg 1 v rs $end
$scope module RAM $end
$var wire 32 w addr [31:0] $end
$var wire 1 x clk $end
$var reg 32 y e [31:0] $end
$var reg 32 z f [31:0] $end
$upscope $end
$scope module DEC $end
$var wire 1 x clk $end
$var wire 32 { i1 [31:0] $end
$var wire 32 | i2 [31:0] $end
$var reg 5 } addr2reg1 [4:0] $end
$var reg 5 ~ addr2reg2 [4:0] $end
$var reg 5 !" addr2reg3 [4:0] $end
$var reg 5 "" addrreg1 [4:0] $end
$var reg 5 #" addrreg2 [4:0] $end
$var reg 5 $" addrreg3 [4:0] $end
$var reg 32 %" e [31:0] $end
$var reg 1 &" en_alu2 $end
$var reg 32 '" f [31:0] $end
$upscope $end
$scope module REGS $end
$var wire 5 (" a [4:0] $end
$var wire 5 )" b [4:0] $end
$var wire 5 *" c [4:0] $end
$var wire 1 x clk $end
$var wire 5 +" d [4:0] $end
$var wire 5 ," e [4:0] $end
$var wire 5 -" f [4:0] $end
$var wire 32 ." ins1 [31:0] $end
$var wire 32 /" ins2 [31:0] $end
$var wire 32 0" w1 [31:0] $end
$var wire 5 1" w1addr [4:0] $end
$var wire 32 2" w2 [31:0] $end
$var wire 5 3" w2addr [4:0] $end
$var reg 32 4" a1 [31:0] $end
$var reg 32 5" a2 [31:0] $end
$var reg 32 6" a3 [31:0] $end
$var reg 1 7" alu2_en $end
$var reg 32 8" b1 [31:0] $end
$var reg 32 9" b2 [31:0] $end
$var reg 32 :" b3 [31:0] $end
$var reg 32 ;" inso1 [31:0] $end
$var reg 32 <" inso2 [31:0] $end
$upscope $end
$scope module a1 $end
$var wire 32 =" a [31:0] $end
$var wire 1 >" aluNum $end
$var wire 1 x clk $end
$var wire 1 ?" en_dec $end
$var wire 1 @" en_reg $end
$var wire 32 A" ipc [31:0] $end
$var wire 32 B" r1 [31:0] $end
$var wire 32 C" r2 [31:0] $end
$var wire 32 D" r3 [31:0] $end
$var reg 5 E" d [4:0] $end
$var reg 32 F" data [31:0] $end
$var reg 32 G" pc [31:0] $end
$upscope $end
$scope module a2 $end
$var wire 32 H" a [31:0] $end
$var wire 1 I" aluNum $end
$var wire 1 x clk $end
$var wire 1 b en_dec $end
$var wire 1 a en_reg $end
$var wire 32 J" ipc [31:0] $end
$var wire 32 K" r1 [31:0] $end
$var wire 32 L" r2 [31:0] $end
$var wire 32 M" r3 [31:0] $end
$var reg 5 N" d [4:0] $end
$var reg 32 O" data [31:0] $end
$var reg 32 P" pc [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx P"
bx O"
bx N"
bx M"
bx L"
bx K"
b0 J"
1I"
bx H"
bx G"
bx F"
bx E"
bx D"
bx C"
bx B"
b0 A"
1@"
1?"
0>"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
x7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
x&"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
b1001010100100000000100000 |
b1001010100100000000100000 {
b1001010100100000000100000 z
b1001010100100000000100000 y
0x
b0 w
0v
b11 u
b1 t
b0 s
1r
b11111111111111111111111111111111 q
0p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
xb
xa
bx `
bx _
b1001010100100000000100000 ^
b1001010100100000000100000 ]
bx \
bx [
bx Z
bx Y
bx X
bx W
0V
0U
bx T
bz S
bz R
bz0000000000000000zzzzzzzzzzzzzzz Q
bz P
bx O
zN
zM
zL
bz K
bx J
bz I
zH
zG
xF
zE
zD
zC
zB
bz A
bz @
bz ?
bz >
bz =
bz <
z;
bz :
bz 9
08
bx 7
bz 6
x5
x4
z3
z2
z1
bx 0
bx /
bx .
bx -
bz ,
bz +
bz *
bz )
bz (
bz '
z&
bz %
bz $
0#
bz "
bz !
$end
#10
1&"
1a
b1001010100100000000100000 '"
b1001010100100000000100000 Z
b1001010100100000000100000 /"
b1001010100100000000100000 %"
b1001010100100000000100000 Y
b1001010100100000000100000 ."
b1000 !"
b1000 o
b1000 -"
b1010 ~
b1010 n
b1010 ,"
b1001 }
b1001 m
b1001 +"
b1000 $"
b1000 f
b1000 *"
b1010 #"
b1010 e
b1010 )"
b1001 ""
b1001 d
b1001 ("
17"
1b
b0 E"
b0 W
b0 1"
b0 N"
b0 X
b0 3"
1p
1x
#20
0p
0x
#30
b1 E"
b1 W
b1 1"
b1000 F"
b1000 _
b1000 0"
07"
0b
b1 :"
b1 l
b1 M"
b111 9"
b111 k
b111 L"
b1 8"
b1 j
b1 K"
b1 6"
b1 i
b1 D"
b111 5"
b111 h
b111 C"
b1 4"
b1 g
b1 B"
b1001010100100000000100000 <"
b1001010100100000000100000 \
b1001010100100000000100000 H"
b1001010100100000000100000 ;"
b1001010100100000000100000 [
b1001010100100000000100000 ="
1p
1x
#40
0p
0x
#50
b1 E"
b1 W
b1 1"
1p
1x
#60
0p
0x
#70
b1 E"
b1 W
b1 1"
1p
1x
#80
0p
0x
#90
b1 E"
b1 W
b1 1"
1p
1x
#100
0p
0x
#110
b1 E"
b1 W
b1 1"
1p
1x
#120
0p
0x
#130
b1 E"
b1 W
b1 1"
1p
1x
#140
0p
0x
#150
b1 E"
b1 W
b1 1"
1p
1x
#160
0p
0x
#170
b1 E"
b1 W
b1 1"
1p
1x
#180
0p
0x
#190
b1 E"
b1 W
b1 1"
1p
1x
#200
0p
0x
#210
b1 E"
b1 W
b1 1"
1p
1x
#220
0p
0x
#230
b1 E"
b1 W
b1 1"
1p
1x
#240
0p
0x
#250
b1 E"
b1 W
b1 1"
1p
1x
#260
0p
0x
#270
b1 E"
b1 W
b1 1"
1p
1x
#280
0p
0x
#290
b1 E"
b1 W
b1 1"
1p
1x
#300
0p
0x
#310
b1 E"
b1 W
b1 1"
1p
1x
#320
0p
0x
